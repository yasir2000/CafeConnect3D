{
  "NetworkBehaviour Class": {
    "prefix": "netbehaviour",
    "body": [
      "using Mirror;",
      "using UnityEngine;",
      "",
      "namespace CafeConnect3D.${1:Namespace}",
      "{",
      "    /// <summary>",
      "    /// ${2:Description}",
      "    /// </summary>",
      "    public class ${3:ClassName} : NetworkBehaviour",
      "    {",
      "        [Header(\"${4:Settings}\")]",
      "        [SerializeField] private ${5:type} ${6:fieldName};",
      "",
      "        void Start()",
      "        {",
      "            if (isServer)",
      "            {",
      "                ${7:// Server initialization}",
      "            }",
      "",
      "            if (isClient)",
      "            {",
      "                ${8:// Client initialization}",
      "            }",
      "        }",
      "",
      "        [Command]",
      "        void Cmd${9:MethodName}(${10:parameters})",
      "        {",
      "            ${11:// Server-side logic}",
      "        }",
      "",
      "        [ClientRpc]",
      "        void Rpc${12:MethodName}(${13:parameters})",
      "        {",
      "            ${14:// Client-side logic}",
      "        }",
      "    }",
      "}"
    ],
    "description": "Create a NetworkBehaviour class template"
  },
  
  "Singleton Manager": {
    "prefix": "singleton",
    "body": [
      "using UnityEngine;",
      "",
      "namespace CafeConnect3D.Core.Managers",
      "{",
      "    /// <summary>",
      "    /// ${1:Description}",
      "    /// </summary>",
      "    public class ${2:ManagerName} : MonoBehaviour",
      "    {",
      "        private static ${2:ManagerName} instance;",
      "        public static ${2:ManagerName} Instance",
      "        {",
      "            get",
      "            {",
      "                if (instance == null)",
      "                {",
      "                    instance = FindObjectOfType<${2:ManagerName}>();",
      "                    if (instance == null)",
      "                    {",
      "                        GameObject go = new GameObject(\"${2:ManagerName}\");",
      "                        instance = go.AddComponent<${2:ManagerName}>();",
      "                    }",
      "                }",
      "                return instance;",
      "            }",
      "        }",
      "",
      "        void Awake()",
      "        {",
      "            if (instance == null)",
      "            {",
      "                instance = this;",
      "                DontDestroyOnLoad(gameObject);",
      "                Initialize();",
      "            }",
      "            else if (instance != this)",
      "            {",
      "                Destroy(gameObject);",
      "            }",
      "        }",
      "",
      "        private void Initialize()",
      "        {",
      "            ${3:// Initialization logic}",
      "        }",
      "    }",
      "}"
    ],
    "description": "Create a Singleton Manager class"
  }
}